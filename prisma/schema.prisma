// /prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  developer
  rh
}

enum Availability {
  Available
  Unavailable
  Partial
}

model User {
  // CORRETO: Chave primária como UUID String.
  id                      String                   @id @default(uuid())
  fullName                String
  email                   String                   @unique
  passwordHash            String
  userType                UserType
  createdAt               DateTime                 @default(now())

  developerProfile        DeveloperProfile?
  professionalExperiences ProfessionalExperience[]
  createdProjects         Project[]                @relation("ProjectCreator")
  projectParticipations   ProjectParticipant[]
  createdVacancies        Vacancy[]
  candidacies             Candidacy[]
  competencies            UserCompetency[]

  @@map("users")
}

model DeveloperProfile {
  // CORREÇÃO: O ID aqui é a própria chave estrangeira para a relação 1-para-1.
  // Não precisa de @default(uuid()) porque ele recebe o ID do usuário.
  userId          String       @id
  bio             String?      @db.Text
  location        String?
  linkedinUrl     String?
  githubUrl       String?
  portfolioUrl    String?
  availability    Availability @default(Available)

  user            User         @relation(fields: [userId], references: [id])

  @@map("developer_profiles")
}

model ProfessionalExperience {
  // CORREÇÃO: ID próprio como UUID.
  id              String   @id @default(uuid())
  // CORREÇÃO: userId é apenas uma chave estrangeira, não um @id.
  userId          String
  jobTitle        String
  companyName     String
  description     String   @db.Text
  startDate       DateTime @db.Date
  endDate         DateTime?@db.Date
  location        String?

  user            User     @relation(fields: [userId], references: [id])

  @@map("professional_experiences")
}

model Project {
  id              String   @id @default(uuid())
  // CORREÇÃO: O tipo de creatorId deve ser String para corresponder ao User.id.
  creatorId       String
  title           String
  description     String   @db.Text
  repoUrl         String?
  liveUrl         String?
  completionDate  DateTime?@db.Date

  creator         User                 @relation("ProjectCreator", fields: [creatorId], references: [id])
  participants    ProjectParticipant[]

  @@map("projects")
}

model Vacancy {
  id                  String   @id @default(uuid())
  // CORREÇÃO: O tipo de postedById deve ser String para corresponder ao User.id.
  postedById          String
  title               String
  description         String   @db.Text
  contractType        String
  location            String
  status              String   @default("Open")
  publishedAt         DateTime @default(now())

  postedBy            User                 @relation(fields: [postedById], references: [id])
  requiredCompetencies VacancyCompetency[]
  candidacies         Candidacy[]

  @@map("vacancies")
}

model Competency {
  id              String   @id @default(uuid())
  name            String   @unique

  users           UserCompetency[]
  vacancies       VacancyCompetency[]

  @@map("competencies")
}

// TABELAS DE JUNÇÃO (Muitos-para-Muitos)

model UserCompetency {
  userId          String
  competencyId    String
  level           String

  user            User       @relation(fields: [userId], references: [id])
  competency      Competency @relation(fields: [competencyId], references: [id])

  // CORRETO: Define a chave primária composta aqui.
  @@id([userId, competencyId])
  @@map("user_competencies")
}

model ProjectParticipant {
  projectId       String
  // CORREÇÃO: O tipo de userId deve ser String.
  userId          String
  roleInProject   String

  project         Project @relation(fields: [projectId], references: [id])
  user            User    @relation(fields: [userId], references: [id])

  @@id([projectId, userId])
  @@map("project_participants")
}

model VacancyCompetency {
  vacancyId       String
  competencyId    String
  isRequired      Boolean  @default(false)

  vacancy         Vacancy    @relation(fields: [vacancyId], references: [id])
  competency      Competency @relation(fields: [competencyId], references: [id])

  @@id([vacancyId, competencyId])
  @@map("vacancy_competencies")
}

model Candidacy {
  // CORREÇÃO: Apenas um ID UUID para a candidatura.
  id              String   @id @default(uuid())
  vacancyId       String
  userId          String
  appliedAt       DateTime @default(now())
  status          String   @default("Received")

  vacancy         Vacancy  @relation(fields: [vacancyId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
  
  // Opcional: Garante que um usuário só possa se candidatar uma vez para a mesma vaga.
  @@unique([userId, vacancyId])
  @@map("candidacies")
}